perdoc_topic_probs.mean.by <- by(covar_matrix[, 2:ideal_k$topics[1]], covar_matrix$story_id, colMeans)
perdoc_topic_probs.mean <- do.call("rbind", covar_matrix)
perdoc_topic_probs.mean
# Get Topic Probabilities per Document
perdoc_topic_probs <- as.data.frame(topicmodels::posterior(lda_model)$topics)
# Start Building Covariance Matrix
df_covar <- as.data.frame(row.names(perdoc_topic_probs), stringsAsFactors = FALSE)
colnames(df_covar) <- c("story_id")
df_covar$story_id <- as.numeric(df_covar$story_id)
# Bind Coveriance Matrix to Posterior Probabilities
covar_matrix <- cbind(df_covar, perdoc_topic_probs)
# Join to Final Dataframe to get Metadata
covar_matrix <- dplyr::left_join(covar_matrix, df_final, by = "story_id")
perdoc_topic_probs.mean.by <- by(covar_matrix[, 2:ideal_k$topics[1]+1], covar_matrix$story_id, colMeans)
perdoc_topic_probs.mean <- do.call("rbind", covar_matrix)
library(corrplot)
c <- cor(perdoc_topic_probs.mean)
corrplot(c, method = "circle")
appl(perdoc_topic_probs.mean,class)
apply(perdoc_topic_probs.mean,class)
sapply(perdoc_topic_probs.mean,class)
sapply(head(perdoc_topic_probs.mean),class)
# Get Topic Probabilities per Document
perdoc_topic_probs <- as.data.frame(topicmodels::posterior(lda_model)$topics)
# Start Building Covariance Matrix
df_covar <- as.data.frame(row.names(perdoc_topic_probs), stringsAsFactors = FALSE)
colnames(df_covar) <- c("story_id")
df_covar$story_id <- as.numeric(df_covar$story_id)
# Bind Coveriance Matrix to Posterior Probabilities
covar_matrix <- cbind(df_covar, perdoc_topic_probs)
sapply(covar_matrix,class)
covar_matrix <- dplyr::left_join(covar_matrix, df_final, by = "story_id")
sapply(covar_matrix,class)
perdoc_topic_probs.mean.by <- by(covar_matrix[, 2:ideal_k$topics[1]+1], covar_matrix$story_id, colMeans)
perdoc_topic_probs.mean <- do.call("rbind", perdoc_topic_probs.mean.by)
library(corrplot)
c <- cor(perdoc_topic_probs.mean)
corrplot(c, method = "circle")
covar_matrix <- dplyr::left_join(covar_matrix, df_final, by = "story_id")
perdoc_topic_probs.mean.by <- by(covar_matrix[, 1:ideal_k$topics[1]+1], covar_matrix$story_id, colMeans)
perdoc_topic_probs.mean <- do.call("rbind", perdoc_topic_probs.mean.by)
library(corrplot)
c <- cor(perdoc_topic_probs.mean)
corrplot(c, method = "circle")
perdoc_topic_probs
c
perdoc_topic_probs
perdoc_topic_probs.mean
c
perdoc_topic_probs.mean <- do.call("rbind", perdoc_topic_probs.mean.by)
perdoc_topic_probs.mean
perdoc_topic_probs.mean$1
perdoc_topic_probs.mean[1]
perdoc_topic_probs.mean[2
perdoc_topic_probs.mean[2]
perdoc_topic_probs.mean.by <- by(covar_matrix[, 1:ideal_k$topics[1]+1], covar_matrix$story, colMeans)
perdoc_topic_probs.mean <- do.call("rbind", perdoc_topic_probs.mean.by)
perdoc_topic_probs.mean.by <- by(covar_matrix[, 1:ideal_k$topics[1]+1], covar_matrix$story_id, colMeans)
perdoc_topic_probs.mean.by <- by(covar_matrix[, 1:ideal_k$topics[1]+1], covar_matrix$story_id, colMeans)
perdoc_topic_probs.mean <- do.call("rbind", perdoc_topic_probs.mean.by)
library(corrplot)
c <- cor(perdoc_topic_probs.mean)
corrplot(c, method = "circle")
c
?corrplot
c <- cor(perdoc_topic_probs.mean)
corrplot(c, method = "circle", is.corr = FALSE)
c <- cor(perdoc_topic_probs.mean)
corrplot(c, method = "circle", is.corr = TRUE)
perdoc_topic_probs.ratios <- perdoc_topic_probs.mean
for (ii in 1:nrow(perdoc_topic_probs.mean)) {
for (jj in 1:ncol(perdoc_topic_probs.mean)) {
perdoc_topic_probs.mean.ratios[ii,jj] <-
perdoc_topic_probs.mean[ii,jj] / sum(perdoc_topic_probs.mean[ii,-jj])
}
}
perdoc_topic_probs.ratios <- perdoc_topic_probs.mean
for (ii in 1:nrow(perdoc_topic_probs.mean)) {
for (jj in 1:ncol(perdoc_topic_probs.mean)) {
perdoc_topic_probs.ratios[ii,jj] <-
perdoc_topic_probs.mean[ii,jj] / sum(perdoc_topic_probs.mean[ii,-jj])
}
}
topics_by_ratios <- apply(perdoc_topic_probs.ratios, 1, function(x) sort(x, decreasing = TRUE, index.return = TRUE)$ix)
topics_by_ratios <- apply(perdoc_topic_probs.ratios, 1, function(x) sort(x, decreasing = TRUE, index.return = TRUE)$ix)
topics_best_indicators <- topics_by_ratios[1,]
topics_best_indicators
head(topics_best_indicators)
colnames(topics)
colnames(topics_best_indicators)
topics_best_indicators[0]
topics_best_indicators[1]
topics_best_indicators[2]
viz_topicmodel <- function(fitted, corpus, doc_term){
## Required packages
library(topicmodels)
library(dplyr)
library(stringi)
library(tm)
library(LDAvis)
## Find required quantities
phi <- posterior(fitted)$terms %>% as.matrix
theta <- posterior(fitted)$topics %>% as.matrix
vocab <- colnames(phi)
doc_length <- vector()
for (i in 1:length(corpus)) {
temp <- paste(corpus[[i]]$content, collapse = ' ')
doc_length <- c(doc_length, stri_count(temp, regex = '\\S+'))
}
temp_frequency <- inspect(doc_term)
freq_matrix <- data.frame(ST = colnames(temp_frequency),
Freq = colSums(temp_frequency))
rm(temp_frequency)
## Convert to json
json_lda <- LDAvis::createJSON(phi = phi, theta = theta,
vocab = vocab,
doc.length = doc_length,
term.frequency = freq_matrix$Freq)
return(json_lda)
}
installed.packages('LDAVis')
installed.packages('LDAbis')
installed.packages('LDAvis')
viz_json <- topicmodels_json_ldavis(lda_model, documents, document_matrix_st)
viz_json <- viz_topicmodel(lda_model, documents, document_matrix_st)
install.packages('LDAvis')
viz_json <- viz_topicmodel(lda_model, documents, document_matrix_st)
documents
document_matrix_st
length(document_matrix_st)
document_matrix_st.documents
nrows(document_matrix_st)
viz_json <- viz_topicmodel(lda_model, documents[1:5913], document_matrix_st)
phi <- posterior(fitted)$terms %>% as.matrix
theta <- posterior(fitted)$topics %>% as.matrix
vocab <- colnames(phi)
doc_length <- length(lda_model$terms)
temp_frequency <- inspect(doc_term)
freq_matrix <- data.frame(ST = colnames(temp_frequency),
Freq = colSums(temp_frequency))
rm(temp_frequency)
json_lda <- LDAvis::createJSON(phi = phi, theta = theta,
vocab = vocab,
doc.length = doc_length,
term.frequency = freq_matrix$Freq)
phi <- posterior(lda_model)$terms %>% as.matrix
theta <- posterior(lda_model)$topics %>% as.matrix
vocab <- colnames(phi)
doc_length <- length(lda_model$terms)
temp_frequency <- inspect(document_matrix_st)
freq_matrix <- data.frame(ST = colnames(temp_frequency),
Freq = colSums(temp_frequency))
rm(temp_frequency)
json_lda <- LDAvis::createJSON(phi = phi, theta = theta,
vocab = vocab,
doc.length = doc_length,
term.frequency = freq_matrix$Freq)
doc_length <- length(lda_model$terms)
lda_model$terms
posterior(lda_model)$terms
length(posterior(lda_model)$terms)
phi <- posterior(lda_model)$terms %>% as.matrix
theta <- posterior(lda_model)$topics %>% as.matrix
vocab <- colnames(phi)
doc_length <- length(posterior(lda_model)$terms)
temp_frequency <- inspect(document_matrix_st)
freq_matrix <- data.frame(ST = colnames(temp_frequency),
Freq = colSums(temp_frequency))
rm(temp_frequency)
json_lda <- LDAvis::createJSON(phi = phi, theta = theta,
vocab = vocab,
doc.length = doc_length,
term.frequency = freq_matrix$Freq)
?createJSON
doc_length
phi
doc_length
vocab
length(vocab)
doc_length
"
analysis_detected_topics.R
In this script we analyzed the final annotated topic document matrix which contains:
- Top 3 Ranked Articles for every day in April 2019 and May 2019
- For every story, we have a probability of association to a particular Topic
"
library(gridExtra)
library(grid)
library(dplyr)
library(psych)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(grid)
library(zoo)
library(plyr)
library(lubridate)
library(ggpubr)
library(corrplot)
library(GGally)
library(ggwordcloud)
library(tm)
library(wordcloud)
library(stringr)
library(stringi)
library(dplyr)
# Load The Data
df <- read.csv(file="./data-results-topicmodel/final-annotated-topic-document-matrix.csv", header=TRUE, sep=",")
df$points <- as.numeric(df$points)
df$comments <- as.numeric(df$comments)
setwd('/home/jkdll/uom/ds-statistics/src/')
"
analysis_detected_topics.R
In this script we analyzed the final annotated topic document matrix which contains:
- Top 3 Ranked Articles for every day in April 2019 and May 2019
- For every story, we have a probability of association to a particular Topic
"
library(gridExtra)
library(grid)
library(dplyr)
library(psych)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(grid)
library(zoo)
library(plyr)
library(lubridate)
library(ggpubr)
library(corrplot)
library(GGally)
library(ggwordcloud)
library(tm)
library(wordcloud)
library(stringr)
library(stringi)
library(dplyr)
# Load The Data
df <- read.csv(file="./data-results-topicmodel/final-annotated-topic-document-matrix.csv", header=TRUE, sep=",")
df$points <- as.numeric(df$points)
df$comments <- as.numeric(df$comments)
df_top_post <- subset(df, df$rank == 1 & df$story != 'I Sell Onions on the Internet (www.deepsouthventures.com)')
topics_top_post <- setNames( aggregate(list(points=df_top_post$points,comments=df_top_post$comments), by=list(Category=df_top_post$top_story_topic_annotation)
, FUN=median)
, c("Topic", "Points", "Comments") )
topics_top_post$is_noisy <- ifelse(grepl("Noisy",topics_top_post$Topic) | grepl("Nosiy",topics_top_post$Topic), 1, 0)
topics_top_post
tab_toprank_topics <- head(topics_top_post[order(topics_top_post$Points, decreasing = TRUE),],5) %>%
dplyr::select(Top_Topic = Topic, Med_Points = Points)
top_topics_articles_points <- data.frame(Top_topic = character(), Story = character())
for(topic in tab_toprank_topics$Top_Topic){
temp_df = subset(df_top_post,df_top_post$top_story_topic_annotation == topic) %>%
dplyr::select(top_story_topic_annotation, story, points) %>%
top_n(n=3,wt=points) %>%
arrange(top_story_topic_annotation,desc(points))
top_topics_articles_points <- rbind(top_topics_articles_points,temp_df)
}
top_topics_articles_points <-top_topics_articles_points %>% dplyr::select(annotation = top_story_topic_annotation, story, points)
tab_toprank_topics <- head(topics_top_post[order(topics_top_post$Points, decreasing = TRUE),],10) %>%
dplyr::select(Top_Topic = Topic, Med_Points = Points)
top_topics_articles_points <- data.frame(Top_topic = character(), Story = character())
for(topic in tab_toprank_topics$Top_Topic){
temp_df = subset(df_top_post,df_top_post$top_story_topic_annotation == topic) %>%
dplyr::select(top_story_topic_annotation, story, points) %>%
top_n(n=3,wt=points) %>%
arrange(top_story_topic_annotation,desc(points))
top_topics_articles_points <- rbind(top_topics_articles_points,temp_df)
}
top_topics_articles_points <-top_topics_articles_points %>% dplyr::select(annotation = top_story_topic_annotation, story, points)
write.csv(top_topics_articles_points,"./viz/topic_model_02_toprank_topics_points.csv", row.names = FALSE)
topics_top_post_cnt <- setNames( aggregate(list(points=df_top_post$points,comments=df_top_post$comments), by=list(Category=df_top_post$top_story_topic_annotation)
, FUN=count)
, c("Topic", "Count") )
topics_top_post_cnt$is_noisy <- ifelse(grepl("Noisy",topics_top_post_cnt$Topic) | grepl("Nosiy",topics_top_post_cnt$Topic), 1, 0)
topics_top_post_cnt
topics_top_post_cnt <- setNames( aggregate(list(points=df_top_post$points), by=list(Category=df_top_post$top_story_topic_annotation)
, FUN=count)
, c("Topic", "Count") )
topics_top_post_cnt$is_noisy <- ifelse(grepl("Noisy",topics_top_post_cnt$Topic) | grepl("Nosiy",topics_top_post_cnt$Topic), 1, 0)
topics_top_post_cnt
freq_dist <- df
freq_dist$rank <- as.character(ifelse(freq_dist$rank == 1,1,0))
ggplot(freq_dist, aes(x=points))
+ geom_freqpoly( aes(color = rank, linetype = rank),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
library(ggpubr)
freq_dist <- df
freq_dist$rank <- as.character(ifelse(freq_dist$rank == 1,1,0))
ggplot(freq_dist, aes(x=points))
+ geom_freqpoly( aes(color = rank, linetype = rank),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = rank, linetype = rank),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
freq_dist <- df_top_post
freq_dist$rank <- as.character(ifelse(freq_dist$rank == 1,1,0))
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = rank, linetype = rank),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
freq_dist <- df_top_post
freq_dist$rank <- as.character(ifelse(freq_dist$rank == 1,1,0))
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = top_story_topic_annotation, linetype = top_story_topic_annotation),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
topics_top_post_cnt
topics_top_post_cnt <- setNames( aggregate(list(points=df_top_post$points), by=list(Category=df_top_post$top_story_topic_annotation)
, FUN=count)
, c("Topic", "Count") )
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
topics_top_post_cnt
sum_cnt <- sum(topics_post_cnt$freq)
sum_cnt <- sum(topics_top_post_cnt$freq)
sum_cnt
topics_top_post_cnt <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
sum_cnt <- sum(topics_top_post_cnt$freq)
topics_top_post_cnt$prob <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt
freq_dist <- freq_dist[order(prob),]
head(freq_dist)
topics_top_post_cnt <- topics_top_post_cnt[order(prob),]
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
sum_cnt <- sum(topics_top_post_cnt$freq)
topics_top_post_cnt$prob <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt <- topics_top_post_cnt[order(prob),]
topics_top_post_cnt <- topics_top_post_cnt[order(topics_top_post_cnt$prob),]
topics_top_post_cnt
topics_top_post_cnt <- topics_top_post_cnt[order(-topics_top_post_cnt$prob),]
topics_top_post_cnt
topics_top_post_cnt <- head(topics_top_post_cnt[order(-topics_top_post_cnt$prob),],10)
topics_top_post_cnt <- head(topics_top_post_cnt[order(-topics_top_post_cnt$prob),],5)
topics_top_post_cnt
ggplot(data=topics_top_post_cnt, aes(x=top_story_topic_annotation, y=freq)) +
geom_bar(stat="identity")
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
sum_cnt <- sum(topics_top_post_cnt$freq)
topics_top_post_cnt$prob <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt <- head(topics_top_post_cnt[order(-topics_top_post_cnt$prob),],10)
ggplot(data=topics_top_post_cnt, aes(x=top_story_topic_annotation, y=freq)) +
geom_bar(stat="identity")
ggplot(data=topics_top_post_cnt, aes(x=sub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity")
?sub
ggplot(data=topics_top_post_cnt, aes(x=gsub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity")
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
sum_cnt <- sum(topics_top_post_cnt$freq)
topics_top_post_cnt$prob <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt <- head(topics_top_post_cnt[order(topics_top_post_cnt$prob),],10)
ggplot(data=topics_top_post_cnt, aes(x=gsub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity")
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
sum_cnt <- sum(topics_top_post_cnt$freq)
topics_top_post_cnt$prob <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt <- head(topics_top_post_cnt[order(-topics_top_post_cnt$prob),],10)
ggplot(data=topics_top_post_cnt, aes(x=gsub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity")
ggplot(data=topics_top_post_cnt, aes(x=gsub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity")
+ coord_flip()
ggplot(data=topics_top_post_cnt, aes(x=gsub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity") + coord_flip()
ggplot(data=topics_top_post_cnt, aes(x=gsub(" ", " \n", top_story_topic_annotation), y=freq)) +
geom_bar(stat="identity")
ggplot(data=topics_top_post_cnt, aes(x=reorder( gsub(" ", " \n", top_story_topic_annotation), -freq), y=freq)) +
geom_bar(stat="identity")
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = top_story_topic_annotation, linetype = top_story_topic_annotation),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_economist(base_family="sans") +
labs(title="Top 10 Topics within Top Rank by Frequency", x="Topics", y="Frequency")
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = top_story_topic_annotation, linetype = top_story_topic_annotation),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = top_story_topic_annotation, linetype = top_story_topic_annotation),
bins = 30, size = 1.5)
ggplot(freq_dist, aes(x=points)) +
geom_freqpoly( aes(color = top_story_topic_annotation, linetype = top_story_topic_annotation),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data=topics_top_post_cnt, aes(x=reorder( gsub(" ", " \n", top_story_topic_annotation), -freq), y=freq)) +
geom_bar(stat="identity") +
theme_economist(base_family="sans") +
labs(title="Top Topics in the Top Rank By by Avg. Points (Median)", x="Comments", y="Points")
ggplot(data=topics_top_post_cnt, aes(x=reorder( gsub(" ", " \n", top_story_topic_annotation), -freq), y=freq)) +
geom_bar(stat="identity", color="#A62D37") +
theme_economist(base_family="sans") +
labs(title="Top Topics in the Top Rank By by Avg. Points (Median)", x="Comments", y="Points")
ggplot(data=topics_top_post_cnt, aes(x=reorder( gsub(" ", " \n", top_story_topic_annotation), -freq), y=freq)) +
geom_bar(stat="identity", fill="#A62D37") +
theme_economist(base_family="sans") +
labs(title="Top Topics in the Top Rank By by Avg. Points (Median)", x="Comments", y="Points")
toprank_freqviz <- ggplot(data=topics_top_post_cnt, aes(x=reorder( gsub(" ", " \n", top_story_topic_annotation), -freq), y=freq)) +
geom_bar(stat="identity", fill="#A62D37") +
theme_economist(base_family="sans") +
labs(title="Top Topics in the Top Rank By by Avg. Points (Median)", x="Comments", y="Points")
topics_top_post_cnt <-count(df_top_post, "top_story_topic_annotation")
sum_cnt <- sum(topics_top_post_cnt$freq)
topics_top_post_cnt$prob <- topics_top_post_cnt$freq/sum_cnt
topics_top_post_cnt <- head(topics_top_post_cnt[order(-topics_top_post_cnt$prob),],10)
toprank_freqviz <- ggplot(data=topics_top_post_cnt, aes(x=reorder( gsub(" ", " \n", top_story_topic_annotation), -freq), y=freq)) +
geom_bar(stat="identity", fill="#A62D37") +
theme_economist(base_family="sans") +
labs(title="Top Topics in the Top Rank By by Avg. Points (Median)", x="Comments", y="Points")
write.csv(topics_top_post_cnt,"./viz/topic_model_02_toprank_freqtab.csv", row.names = FALSE)
ggsave('./viz/topic_model_02_toprank_freqtabviz.png', plot = toprank_freqviz, dpi = 300, scale = 1)
chi_selection <- subset(df, df$rank < 30)
chi_selection$rank <- as.character(ifelse(chi_selection$rank == 1,1,0))
chi_selection$top_topic_id <- as.character(chi_selection$top_topic_id)
#  Perform Chi Squared Test
chi_sample <-  subset(chi_selection, select=c("top_topic_id","rank"))
chi_tbl <- table(chi_sample)
chisq.test(chi_tbl)
cor.test(x=chi_selection$rank, y=chi_selection$topic_id, method = 'spearman')
length(chi_selection$rank)
length(chi_selection$top_topic_id)
cor.test(x=chi_selection$rank, y=chi_selection$topic_id, method = 'spearman')
corr <- cor.test(x=chi_selection$rank, y=chi_selection$topic_id, method = 'spearman')
corr <- cor.test(x=chi_sample$rank, y=chi_sample$topic_id, method = 'spearman')
chi_sample
corr <- cor.test(x=chi_selection$rank, y=chi_selection$topic_id, method = 'spearman')
str(hi_selection$rank)
str(chi_selection$rank)
head(chi_selection)
chi_selection <- subset(df, df$rank < 30)
chi_selection$rank <- as.character(ifelse(chi_selection$rank == 1,1,0))
chi_selection$top_topic_id <- as.character(chi_selection$top_topic_id)
corr <- cor.test(x=chi_selection$rank, y=chi_selection$topic_id, method = 'spearman')
?spearman
?corr
?corr
library(corr)
corr <- cor.test(x=chi_selection$rank, y=chi_selection$top_topic_id, method = 'spearman')
library(MASS)
# We Consider all our data
# We bucket the rank into 1 = Top and 0 = Other Rank
chi_selection <- subset(df, df$rank < 30)
chi_selection$rank <- as.character(ifelse(chi_selection$rank == 1,1,0))
chi_selection$top_topic_id <- as.character(chi_selection$top_topic_id)
#  Perform Chi Squared Test
chi_sample <-  subset(chi_selection, select=c("top_topic_id","rank"))
chi_tbl <- table(chi_sample)
chisq.test(chi_tbl)
"
#### Output:
Pearson's Chi-squared test
data:  chi_tbl
X-squared = 159.48, df = 113, p-value = 0.002634
Warning message:
In chisq.test(chi_tbl) : Chi-squared approximation may be incorrect
"
# p < 0.05 Therefore we reject the null hypothesis
# We observe that due to very low counts, thus the calculation may be unreliable
# We consider using logistic regression, but we conclude that this will serve no benefit because we have 2 categorical values
# This is the best we can do with the data available
# We now try with the spearman test
chi_selection$rank <- as.numeric(chi_selection$rank)
corr <- cor.test(x=chi_selection$rank, y=chi_selection$top_topic_id, method = 'spearman')
anov <- aov(rank ~ top_story_topic_annotation, data = df)
summary(anov)
library(MASS)
# We Consider all our data
# We bucket the rank into 1 = Top and 0 = Other Rank
chi_selection <- subset(df, df$rank < 30)
chi_selection$rank <- as.character(ifelse(chi_selection$rank == 1,1,0))
chi_selection$top_topic_id <- as.character(chi_selection$top_topic_id)
#  Perform Chi Squared Test
chi_sample <-  subset(chi_selection, select=c("top_topic_id","rank"))
chi_tbl <- table(chi_sample)
chisq.test(chi_tbl)
"
#### Output:
Pearson's Chi-squared test
data:  chi_tbl
X-squared = 159.48, df = 113, p-value = 0.002634
Warning message:
In chisq.test(chi_tbl) : Chi-squared approximation may be incorrect
"
# p < 0.05 Therefore we reject the null hypothesis
# We observe that due to very low counts, thus the calculation may be unreliable
# We consider using logistic regression, but we conclude that this will serve no benefit because we have 2 categorical values
# This is the best we can do with the data available
# We now try with a one way annova test
anov <- aov(rank ~ top_story_topic_annotation, data = df)
summary(anov)
df_top_post <- subset(df, df$rank == 1 & df$story != 'I Sell Onions on the Internet (www.deepsouthventures.com)')
topics_top_post <- setNames( aggregate(list(points=df_top_post$points,comments=df_top_post$comments), by=list(Category=df_top_post$top_story_topic_annotation)
, FUN=median)
, c("Topic", "Points", "Comments") )
topics_top_post$is_noisy <- ifelse(grepl("Noisy",topics_top_post$Topic) | grepl("Nosiy",topics_top_post$Topic), 1, 0)
topics_top_post <- subset(topics_top_post, topics_top_post$is_noisy != 1)
tab_toprank_topics <- head(topics_top_post[order(topics_top_post$Points, decreasing = TRUE),],5) %>%
dplyr::select(Top_Topic = Topic, Med_Points = Points)
top_topics_articles_points <- data.frame(Top_topic = character(), Story = character())
for(topic in tab_toprank_topics$Top_Topic){
temp_df = subset(df_top_post,df_top_post$top_story_topic_annotation == topic) %>%
dplyr::select(top_story_topic_annotation, story, points) %>%
top_n(n=3,wt=points) %>%
arrange(top_story_topic_annotation,desc(points))
top_topics_articles_points <- rbind(top_topics_articles_points,temp_df)
}
top_topics_articles_points <-top_topics_articles_points %>% dplyr::select(annotation = top_story_topic_annotation, story, points)
write.csv(top_topics_articles_points,"./viz/topic_model_02_toprank_topics_points.csv", row.names = FALSE)
